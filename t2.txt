Để cập nhật thư mục trên máy tính của bạn lên GitHub và lấy tất cả các thay đổi từ GitHub về lại máy tính, bạn cần thực hiện các bước sau. Dưới đây là hướng dẫn chi tiết.

---

## **1. Cập nhật các thay đổi cục bộ lên GitHub**

### **Bước 1.1: Kiểm tra trạng thái hiện tại**
Chạy lệnh sau để kiểm tra trạng thái của thư mục:
```bash
git status
```
- **Nếu có các thay đổi:** Git sẽ hiển thị danh sách các file đã sửa, thêm hoặc xóa. Bạn cần thêm chúng vào **stage**.
- **Nếu không có thay đổi:** Bạn có thể bỏ qua bước này và tiếp tục với việc lấy cập nhật từ GitHub.

---

### **Bước 1.2: Thêm các thay đổi vào stage**
Thêm tất cả các thay đổi vào stage:
```bash
git add .
```

---

### **Bước 1.3: Commit các thay đổi**
Tạo một commit để lưu lại trạng thái:
```bash
git commit -m "Mô tả thay đổi của bạn"
```

---

### **Bước 1.4: Push các thay đổi lên GitHub**
Push branch `main` (hoặc branch bạn đang làm việc) lên GitHub:
```bash
git push origin main
```

---

## **2. Lấy tất cả cập nhật từ GitHub về máy tính**

### **Bước 2.1: Đồng bộ branch từ GitHub**
Lấy tất cả các thay đổi từ branch `main` trên GitHub:
```bash
git pull origin main
```

---

## **3. Giải quyết xung đột (nếu có)**
Nếu xảy ra xung đột trong quá trình pull, Git sẽ hiển thị danh sách các file bị xung đột.

1. **Kiểm tra trạng thái các file bị xung đột:**
   ```bash
   git status
   ```
2. **Giải quyết xung đột:**
   - Mở từng file bị xung đột trong IDE và sửa nội dung xung đột.  
     Ví dụ:  
     ```plaintext
     <<<<<<< HEAD
     (Nội dung cục bộ)
     =======
     (Nội dung từ GitHub)
     >>>>>>> origin/main
     ```
   - Xóa các dòng `<<<<<<<`, `=======`, `>>>>>>>` và giữ lại nội dung mong muốn.
3. **Thêm file đã sửa vào stage:**
   ```bash
   git add <file>
   ```
4. **Hoàn tất quá trình:**
   Nếu bạn đang **rebase** hoặc **merge**, tiếp tục bằng lệnh:
   ```bash
   git rebase --continue
   ```
   Hoặc:
   ```bash
   git merge --continue
   ```

---

## **4. Xử lý file không cần thiết hoặc không theo dõi**
Nếu có các file không cần thiết (untracked files), bạn có thể:
- Xóa chúng:
  ```bash
  git clean -fd
  ```
- Hoặc thêm chúng vào `.gitignore` để bỏ qua.

---

## **5. Đồng bộ hóa hoàn tất**
Kiểm tra lại trạng thái cuối cùng:
```bash
git status
```
Nếu mọi thứ đã ổn, bạn có thể đẩy lại các thay đổi cuối cùng lên GitHub và đảm bảo mọi thứ đồng bộ:
```bash
git push origin main
```

---

### **Lệnh tóm tắt:**
1. **Cập nhật từ máy lên GitHub:**
   ```bash
   git add .
   git commit -m "Cập nhật thay đổi từ máy tính"
   git push origin main
   ```
2. **Lấy cập nhật từ GitHub về máy:**
   ```bash
   git pull origin main
   ```

Nếu gặp bất kỳ vấn đề nào (xung đột, lỗi push/pull), hãy cung cấp thêm thông tin, mình sẽ hướng dẫn cụ thể hơn! 😊